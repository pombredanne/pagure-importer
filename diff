diff --git a/pagure_importer/__init__.py b/pagure_importer/__init__.py
index fbab797..8b13789 100644
--- a/pagure_importer/__init__.py
+++ b/pagure_importer/__init__.py
@@ -1,2 +1 @@
-import lib
-import settings
+
diff --git a/pagure_importer/app.py b/pagure_importer/app.py
new file mode 100644
index 0000000..6dc3277
--- /dev/null
+++ b/pagure_importer/app.py
@@ -0,0 +1,23 @@
+#!/usr/bin/env python
+
+import click
+import os
+
+REPO_NAME = os.environ.get('REPO_NAME', None)  # this has to be a bare repo
+REPO_PATH = os.environ.get('REPO_PATH', None)  # the parent of the git directory
+
+
+@click.group()
+def app():
+    pass
+
+__all__ = [
+    'app',
+]
+
+# from .commands import github
+from .commands import fedorahosted
+from .commands import github
+
+if __name__ == '__main__':
+    app()
diff --git a/pagure_importer/commands/__init__.py b/pagure_importer/commands/__init__.py
new file mode 100644
index 0000000..e69de29
diff --git a/pagure_importer/commands/fedorahosted.py b/pagure_importer/commands/fedorahosted.py
new file mode 100644
index 0000000..650d133
--- /dev/null
+++ b/pagure_importer/commands/fedorahosted.py
@@ -0,0 +1,15 @@
+import click
+import getpass
+from pagure_importer.app import app, REPO_NAME, REPO_PATH
+from pagure_importer.utils import importer_trac
+from pagure_importer.utils.fas import FASclient
+
+@app.command()
+@click.argument('project_url')
+def fedorahosted(project_url):
+    fas_username = raw_input('Enter you Github Username: ')
+    fas_password = getpass.getpass('Enter your github password: ')
+    fasclient = FASclient(fas_username, fas_password,
+                               'https://admin.fedoraproject.org/accounts')
+    trac_importer = importer_trac.TracImporter(project_url, fasclient)
+    trac_importer.import_issues(repo_path=REPO_NAME, repo_folder=REPO_PATH)
diff --git a/pagure_importer/commands/github.py b/pagure_importer/commands/github.py
new file mode 100644
index 0000000..26ae4fa
--- /dev/null
+++ b/pagure_importer/commands/github.py
@@ -0,0 +1,40 @@
+import click
+import getpass
+
+from pagure_importer.app import app, REPO_NAME, REPO_PATH
+from pagure_importer.utils.importer_github import GithubImporter
+from pagure_importer.utils import (
+    generate_json_for_github_contributors,
+    generate_json_for_github_issue_commentors,
+    assemble_github_contributors_commentors
+)
+
+
+def form_github_issues():
+    github_username = raw_input('Enter you Github Username: ')
+    github_password = getpass.getpass('Enter your github password: ')
+    github_project_name = raw_input('Enter github project name like: "pypingou/pagure" without quotes: ')
+    return (github_username, github_password, github_project_name)
+
+@app.command()
+def github():
+    github_username, github_password, github_project_name = form_github_issues()
+    gen_json = raw_input(
+    'Do you want to generate jsons for project\'s contributers and issue commentors? (y/n): ')
+    if gen_json == 'n':
+        github_importer = GithubImporter(
+            github_username=github_username,
+            github_password=github_password,
+            github_project_name=github_project_name)
+        github_importer.import_issues(repo_path=REPO_NAME, repo_folder=REPO_PATH)
+    else:
+        generate_json_for_github_contributors(
+            github_username,
+            github_password,
+            github_project_name)
+        generate_json_for_github_issue_commentors(
+            github_username,
+            github_password,
+            github_project_name)
+        assemble_github_contributors_commentors()
+    return
diff --git a/pagure_importer/forms.py b/pagure_importer/forms.py
deleted file mode 100644
index a111114..0000000
--- a/pagure_importer/forms.py
+++ /dev/null
@@ -1,10 +0,0 @@
-import getpass
-
-from lib.sources.importer_github import GithubImporter
-from settings import REPO_PATH, REPO_NAME
-
-def form_github_issues():
-    github_username = raw_input('Enter you Github Username: ')
-    github_password = getpass.getpass('Enter your github password: ')
-    github_project_name = raw_input('Enter github project name like: "pypingou/pagure" without quotes: ')
-    return (github_username, github_password, github_project_name)
diff --git a/pagure_importer/lib/__init__.py b/pagure_importer/lib/__init__.py
deleted file mode 100644
index 9a64e3b..0000000
--- a/pagure_importer/lib/__init__.py
+++ /dev/null
@@ -1,170 +0,0 @@
-import git
-import models
-
-import csv
-import os
-import getpass
-import requests
-import json
-from github import Github
-from requests.auth import HTTPBasicAuth
-import pagure_importer
-import pagure_importer.lib
-from pagure_importer.lib.exceptions import FileNotFound, EmailNotFound
-
-def generate_json_for_github_contributors(github_username, github_password, \
-                                                github_project_name):
-    ''' Creates a file containing a list of dicts containing the username and
-    emails of the contributors in the given github project
-    '''
-
-    github_obj = Github(github_username, github_password)
-    project = github_obj.get_repo(github_project_name)
-    commits_url = project.commits_url.replace('{/sha}', '')
-
-    page = 0
-    contributors = []
-    while True:
-        page += 1
-        payload = {'page': page }
-        data_ = json.loads(requests.get(commits_url, params=payload,
-                    auth=HTTPBasicAuth(github_username, github_password)).text)
-
-        if not data_:
-            break
-
-        for data in data_:
-            try:
-                contributor = data['commit']['committer']
-                contributor_email = contributor['email']
-                contributor_fullname = contributor['name']
-                contributor_name = data['committer']['login']
-            except TypeError:
-                print 'Maybe one of the contributors is dropped because of lack of details'
-                continue
-
-            json_data = {
-                'name': contributor_name,
-                'fullname': contributor_fullname,
-                'emails': [contributor_email]
-            }
-
-            present = False
-            for i in contributors:
-                if i == json_data:
-                    present = True
-                    break
-
-            if not present:
-                print 'contributor added: ', contributor_name
-                contributors.append(json_data)
-
-    with open('contributors.json', 'w') as f:
-        f.write(json.dumps(contributors))
-
-    return
-
-
-def generate_json_for_github_issue_commentors(github_username, github_password, \
-                                                github_project_name):
-    ''' Will create a json file containing details of all the user
-    who have commented on any issue in the given project
-    '''
-
-    github_obj = Github(github_username, github_password)
-    project = github_obj.get_repo(github_project_name)
-    issue_comment_url = project.issue_comment_url.replace('{/number}', '')
-
-    page = 0
-    issue_commentors = []
-    while True:
-        page += 1
-        payload = {'page': page }
-        data_ = json.loads(requests.get(issue_comment_url, params=payload,
-                    auth=HTTPBasicAuth(github_username, github_password)).text)
-
-        if not data_:
-            break
-
-        for data in data_:
-            try:
-                commentor = data['user']['login']
-            except TypeError:
-                print 'Maybe one of the issue commentors have been dropped because of lack of details'
-                continue
-
-            present = False
-            for i in issue_commentors:
-                if i == commentor:
-                    present = True
-                    break
-
-            if not present:
-                print 'commentor added: ', commentor
-                issue_commentors.append(commentor)
-
-    with open('issue_commentors.json', 'w') as f:
-        f.write(json.dumps(issue_commentors))
-    return
-
-
-def assemble_github_contributors_commentors():
-    ''' It uses the files: issue_commentors.json and contributors.json
-    Assembles and creates a file: assembled_commentors.csv
-    To use: just fill the empty blocks under emails column'''
-
-    with open('issue_commentors.json', 'r') as ic:
-        issue_names = json.load(ic)
-
-    with open('contributors.json', 'r') as c:
-        contributors = json.load(c)
-
-    names = []
-    for i in issue_names:
-        found = False
-        for j in contributors:
-            if j.get('name', None) == i:
-                j['emails'] = j.get('emails')[0]
-                names.append(j)
-                found = True
-
-        if not found:
-            d = {'name': i, 'fullname': None, 'emails': None}
-            names.append(d)
-
-    with open('assembled_commentors.csv', 'w') as ac:
-        field_names = ['name', 'fullname', 'emails']
-        writer = csv.DictWriter(ac, fieldnames=field_names)
-
-        writer.writeheader()
-        for name in names:
-            writer.writerow(name)
-
-
-def github_get_commentor_email(name):
-    ''' Will return the issue commentor email as given in the
-    assembled_commentors.csv file
-    '''
-
-    if not os.path.exists('assembled_commentors.csv'):
-        raise FileNotFound('The assembled_commentors.json file must be present \
-                Rerun the program and choose to generate the json files')
-
-    data = []
-    with open('assembled_commentors.csv') as ac:
-        reader = csv.DictReader(ac)
-        for row in reader:
-            data.append(dict( \
-                (('name', row['name']), \
-                ('fullname', row['fullname']), \
-                ('emails', row['emails']))))
-
-
-    for i in data:
-        if i.get('name', None) == name:
-            if i['emails']:
-                return str(i['emails'])
-            else:
-                raise EmailNotFound('You need to fill out all the emails of the \
-                        issue commentors')
-
diff --git a/pagure_importer/lib/exceptions.py b/pagure_importer/lib/exceptions.py
deleted file mode 100644
index a5ab5fe..0000000
--- a/pagure_importer/lib/exceptions.py
+++ /dev/null
@@ -1,22 +0,0 @@
-class GithubBadCredentials(Exception):
-    ''' Raised when username/password for github is wrong '''
-    def __init__(self, msg):
-        self.msg = msg
-
-
-class GithubRepoNotFound(Exception):
-    ''' Raised when the repo is not found for the user '''
-    def __init__(self, msg):
-        self.msg = msg
-
-
-class FileNotFound(Exception):
-    ''' Raised when a certain file is not found '''
-    def __init__(self, msg):
-        self.msg = msg
-
-
-class EmailNotFound(Exception):
-    ''' Raised when email is not found '''
-    def __init__(self, msg):
-        self.msg = msg
diff --git a/pagure_importer/lib/fas.py b/pagure_importer/lib/fas.py
deleted file mode 100644
index b63f665..0000000
--- a/pagure_importer/lib/fas.py
+++ /dev/null
@@ -1,23 +0,0 @@
-from fedora.client.fas2 import AccountSystem
-from pagure_importer.lib.models import User
-
-
-class FASclient ():
-    def __init__(self, fas_username, fas_password, fas_url):
-        self.fasclient = AccountSystem(fas_url, username=fas_username,
-                                       password=fas_password)
-
-        anonymous = User(name='', fullname='', emails=[])
-        self.fasuser = {'': anonymous}
-
-    def find_fas_user(self, user):
-
-        if user not in self.fasuser.keys():
-            person = self.fasclient.person_by_username(user)
-            if not person:
-                return self.fasuser['']
-
-            self.fasuser[user] = User(name=user,
-                                      fullname=person['human_name'],
-                                      emails=[person['email']])
-        return self.fasuser[user]
diff --git a/pagure_importer/lib/git.py b/pagure_importer/lib/git.py
deleted file mode 100644
index 33eba48..0000000
--- a/pagure_importer/lib/git.py
+++ /dev/null
@@ -1,98 +0,0 @@
-''' Code taken from https://pagure.io/pagure/blob/master/f/pagure/lib/git.py
-    by pingou@pingoured.fr
-'''
-
-import shutil
-import os
-import pygit2
-import tempfile
-import json
-
-from repo import *
-
-def update_git(obj, repo_path, repo_folder):
-    """ Update the given issue in its git.
-    This method forks the provided repo, add/edit the issue whose file name
-    is defined by the uid field of the issue and if there are additions/
-    changes commit them and push them back to the original repo.
-    """
-
-    if not repo_folder:
-        return
-
-    # Get the fork
-    repopath = os.path.join(repo_folder, repo_path)
-
-    # Clone the repo into a temp folder
-    newpath = tempfile.mkdtemp(prefix='pagure-')
-    new_repo = pygit2.clone_repository(repopath, newpath)
-
-    file_path = os.path.join(newpath, obj.uid)
-
-    # Get the current index
-    index = new_repo.index
-
-    # Are we adding files
-    added = False
-    if not os.path.exists(file_path):
-        added = True
-
-    # Write down what changed
-    with open(file_path, 'w') as stream:
-        stream.write(json.dumps(
-            obj.to_json(), sort_keys=True, indent=4,
-            separators=(',', ': ')))
-
-    # Retrieve the list of files that changed
-    diff = new_repo.diff()
-    files = []
-    for p in diff:
-        if hasattr(p, 'new_file_path'):
-            files.append(p.new_file_path)
-        elif hasattr(p, 'delta'):
-            files.append(p.delta.new_file.path)
-
-    # Add the changes to the index
-    if added:
-        index.add(obj.uid)
-    for filename in files:
-        index.add(filename)
-
-    # If not change, return
-    if not files and not added:
-        shutil.rmtree(newpath)
-        return
-
-    # See if there is a parent to this commit
-    parent = None
-    try:
-        parent = new_repo.head.get_object().oid
-    except pygit2.GitError:
-        pass
-
-    parents = []
-    if parent:
-        parents.append(parent)
-
-    # Author/commiter will always be this one
-    author = pygit2.Signature(name='pagure', email='pagure')
-
-    # Actually commit
-    new_repo.create_commit(
-        'refs/heads/master',
-        author,
-        author,
-        'Updated %s %s: %s' % (obj.isa, obj.uid, obj.title),
-        new_repo.index.write_tree(),
-        parents)
-    index.write()
-
-    # Push to origin
-    ori_remote = new_repo.remotes[0]
-    master_ref = new_repo.lookup_reference('HEAD').resolve()
-    refname = '%s:%s' % (master_ref.name, master_ref.name)
-
-    PagureRepo.push(ori_remote, refname)
-
-    # Remove the clone
-    shutil.rmtree(newpath)
diff --git a/pagure_importer/lib/models.py b/pagure_importer/lib/models.py
deleted file mode 100644
index 3aa3d83..0000000
--- a/pagure_importer/lib/models.py
+++ /dev/null
@@ -1,105 +0,0 @@
-# -*- coding: utf-8 -*-
-
-import datetime
-import json
-import uuid
-
-class Issue():
-    ''' Represents an Issue '''
-
-    def __init__(
-            self, id, title, content,
-            status, date_created, user, private, tags,
-            depends, blocks, assignee, comments=None):
-
-        self.id = id
-        self.title = title
-        self.content = content
-        self.status = status
-        self.date_created = date_created
-        self.user = user
-        self.private = private
-        self.tags = tags
-        self.depends = depends
-        self.blocks = blocks
-        self.assignee = assignee
-        self.comments = comments
-        self.uid = uuid.uuid4().hex
-
-    def to_json(self):
-        ''' Returns a dictionary representation of the issue.
-
-        '''
-        output = {
-            'id': self.id,
-            'title': self.title,
-            'content': self.content,
-            'status': self.status,
-            'date_created': self.date_created.strftime('%s'),
-            'user': self.user,
-            'private': self.private,
-            'tags': self.tags,
-            'depends': self.depends,
-            'blocks': self.blocks,
-            'assignee': self.assignee,
-            'comments': self.comments
-        }
-
-        return output
-
-    @property
-    def isa(self):
-        return 'issue'
-
-
-class IssueComment():
-    ''' Represent a comment for an issue '''
-
-    def __init__(
-            self, id, comment, date_created,
-            user, parent=None, edited_on=None, editor=None):
-
-        self.id = id
-        self.comment = comment
-        self.parent = parent
-        self.date_created = date_created
-        self.user = user
-        self.edited_on = edited_on
-        self.editor = editor
-
-    def to_json(self):
-        ''' Returns a dictionary representation of the issue. '''
-
-        output = {
-            'id': self.id,
-            'comment': self.comment,
-            'parent': self.parent,
-            'date_created': self.date_created.strftime('%s'),
-            'user': self.user,
-            'edited_on': self.edited_on.strftime('%s') if self.edited_on else None,
-            'editor': self.editor or None
-        }
-
-        return output
-
-
-class User():
-    ''' Represents a User '''
-
-    def __init__(
-            self, name, emails,
-            fullname=None):
-        self.name = name
-        self.fullname = fullname
-        self.emails = emails
-
-    def to_json(self):
-        ''' Return a representation of the User in a dictionary. '''
-
-        output = {
-            'name': self.name,
-            'fullname': self.fullname,
-            'emails': self.emails
-        }
-
-        return output
diff --git a/pagure_importer/lib/repo.py b/pagure_importer/lib/repo.py
deleted file mode 100644
index f46b31a..0000000
--- a/pagure_importer/lib/repo.py
+++ /dev/null
@@ -1,70 +0,0 @@
-# -*- coding: utf-8 -*-
-
-''' Code taken from https://pagure.io/pagure/blob/master/f/pagure/lib/repo.py
-    by pingou@pingoured.fr
-'''
-
-
-import pygit2
-import sys
-
-
-def get_pygit2_version():
-    ''' Return pygit2 version as a tuple of integers.
-    This is needed for correct version comparison.
-    '''
-    return tuple([int(i) for i in pygit2.__version__.split('.')])
-
-
-class PagureRepo(pygit2.Repository):
-    """ An utility class allowing to go around pygit2's inability to be
-    stable.
-
-    """
-
-    @staticmethod
-    def push(remote, refname):
-        """ Push the given reference to the specified remote. """
-        pygit2_version = get_pygit2_version()
-        if pygit2_version >= (0, 22):
-            remote.push([refname])
-        else:
-            remote.push(refname)
-
-    def pull(self, remote_name='origin', branch='master', force=False):
-        ''' pull changes for the specified remote (defaults to origin).
-
-        Code from MichaelBoselowitz at:
-        https://github.com/MichaelBoselowitz/pygit2-examples/blob/
-            68e889e50a592d30ab4105a2e7b9f28fac7324c8/examples.py#L58
-        licensed under the MIT license.
-        '''
-
-        for remote in self.remotes:
-            if remote.name == remote_name:
-                remote.fetch()
-                remote_master_id = self.lookup_reference(
-                    'refs/remotes/origin/%s' % branch).target
-
-                if force:
-                    repo_branch = self.lookup_reference(
-                        'refs/heads/%s' % branch)
-                    repo_branch.set_target(remote_master_id)
-
-                merge_result, _ = self.merge_analysis(remote_master_id)
-                # Up to date, do nothing
-                if merge_result & pygit2.GIT_MERGE_ANALYSIS_UP_TO_DATE:
-                    return
-                # We can just fastforward
-                elif merge_result & pygit2.GIT_MERGE_ANALYSIS_FASTFORWARD:
-                    self.checkout_tree(self.get(remote_master_id))
-                    master_ref = self.lookup_reference(
-                        'refs/heads/%s' % branch)
-                    master_ref.set_target(remote_master_id)
-                    self.head.set_target(remote_master_id)
-                elif merge_result & pygit2.GIT_MERGE_ANALYSIS_NORMAL:
-                    sys.exit('Pulling remote changes leads to a conflict')
-                else:
-                    print 'Unexpected merge result: %s' % (
-                            pygit2.GIT_MERGE_ANALYSIS_NORMAL)
-                    raise AssertionError('Unknown merge analysis result')
diff --git a/pagure_importer/lib/sources/__init__.py b/pagure_importer/lib/sources/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/pagure_importer/lib/sources/importer_github.py b/pagure_importer/lib/sources/importer_github.py
deleted file mode 100644
index 2859e99..0000000
--- a/pagure_importer/lib/sources/importer_github.py
+++ /dev/null
@@ -1,134 +0,0 @@
-from github import Github
-import pagure_importer
-import pagure_importer.lib
-from pagure_importer.lib import models
-from pagure_importer.lib import github_get_commentor_email
-from pagure_importer.lib.exceptions import GithubBadCredentials, GithubRepoNotFound
-
-class GithubImporter():
-    ''' Imports from Github using PyGithub and libpagure '''
-    def __init__(
-            self,
-            github_username,
-            github_password,
-            github_project_name):
-        self.github_username = github_username
-        self.github_password = github_password
-        self.github_project_name = github_project_name
-        self.github = Github(github_username, github_password)
-
-    def import_issues(self, repo_path, repo_folder, status='all'):
-        ''' Imports the issues on github for
-        the given project
-        '''
-        github_user = None
-        try:
-            github_user = self.github.get_user(self.github_username)
-        except:
-            raise GithubBadCredentials(
-                    'Given github credentials are not correct')
-        repo = self.github.get_repo(self.github_project_name)
-        try:
-            repo_name = repo.name
-        except:
-            raise GithubRepoNotFound(
-                    'Repo not found, project name wrong')
-
-        for github_issue in repo.get_issues(state=status):
-
-            #title of the issue
-            pagure_issue_title = github_issue.title
-
-            #body of the issue
-            if github_issue.body:
-                pagure_issue_content = github_issue.body
-            else:
-                pagure_issue_content = '#No Description Provided'
-
-            #Some details of a issue
-            if github_issue.state != 'closed':
-                pagure_issue_status = 'Open'
-            else:
-                pagure_issue_status = 'Fixed'
-
-            pagure_issue_created_at = github_issue.created_at
-
-            #Not sure how to deal with this atm
-            pagure_issue_assignee = None
-
-            if github_issue.labels:
-                pagure_issue_tags = [i.name for i in github_issue.labels]
-            else:
-                pagure_issue_tags = []
-
-
-            #few things not supported by github
-            pagure_issue_depends = []
-            pagure_issue_blocks = []
-            pagure_issue_is_private = False
-
-
-            #User who created the issue
-            pagure_issue_user = models.User(
-                    name=github_issue.user.login,
-                    fullname=github_issue.user.name,
-                    emails=[github_issue.user.email])
-
-
-            pagure_issue = models.Issue(
-                    id=None,
-                    title = pagure_issue_title,
-                    content = pagure_issue_content,
-                    status = pagure_issue_status,
-                    date_created = pagure_issue_created_at,
-                    user = pagure_issue_user.to_json(),
-                    private = pagure_issue_is_private,
-                    tags = pagure_issue_tags,
-                    depends = pagure_issue_depends,
-                    blocks = pagure_issue_blocks,
-                    assignee = pagure_issue_assignee)
-
-
-            #comments on the issue
-            comments = []
-            for comment in github_issue.get_comments():
-
-                comment_user = comment.user
-                pagure_issue_comment_user_email = comment_user.email
-                pagure_issue_comment_body = comment.body
-                pagure_issue_comment_created_at = comment.created_at
-                pagure_issue_comment_updated_at = comment.updated_at
-
-
-                #No idea what to do with this right now
-                #editor: not supported by github api
-                pagure_issue_comment_parent = None
-                pagure_issue_comment_editor = None
-
-                #comment updated at
-                pagure_issue_comment_edited_on = comment.updated_at
-
-                #The User who commented
-                pagure_issue_comment_user = models.User(
-                        name=comment_user.login,
-                        fullname=comment_user.name,
-                        emails=[comment_user.email] if comment_user.email \
-                                else [github_get_commentor_email(comment_user.login)])
-
-                #Object to represent comment on an issue
-                pagure_issue_comment = models.IssueComment(
-                        id=None,
-                        comment=pagure_issue_comment_body,
-                        parent=pagure_issue_comment_parent,
-                        date_created=pagure_issue_comment_created_at,
-                        user=pagure_issue_comment_user.to_json(),
-                        edited_on=pagure_issue_comment_edited_on,
-                        editor=pagure_issue_comment_editor)
-
-                comments.append(pagure_issue_comment.to_json())
-
-            #add all the comments to the issue object
-            pagure_issue.comments = comments
-
-            #update the local git repo
-            pagure_importer.lib.git.update_git(pagure_issue, repo_path, repo_folder)
diff --git a/pagure_importer/lib/sources/importer_trac.py b/pagure_importer/lib/sources/importer_trac.py
deleted file mode 100644
index f69a3ce..0000000
--- a/pagure_importer/lib/sources/importer_trac.py
+++ /dev/null
@@ -1,132 +0,0 @@
-from xmlrpclib import ServerProxy
-import pagure_importer
-import pagure_importer.lib
-from pagure_importer.lib.fas import FASclient
-from pagure_importer.lib import trac
-
-
-class TracImporter():
-    '''Pagure importer for trac instance'''
-
-    def __init__(self, trac_project_url):
-        self.tracclient = ServerProxy(trac_project_url + '/rpc')
-        self.fasclient = FASclient('user', 'password',
-                                   'https://admin.fedoraproject.org/accounts')
-
-    def _find_fas_user(self, user):
-        person = self.fasclient.person_by_username(user)
-        human_name = person['human_name']
-        email = person['email']
-        pagure_user = models.User(
-            name=user,
-            fullname=human_name,
-            emails=[email])
-        return pagure_user
-
-    def _get_ticket_tags(self, trac_ticket):
-        return []
-
-    def _get_ticket_status(self, trac_ticket):
-        ''' Converts Trac ticket status
-            to Pagure issue status'''
-
-        if trac_ticket['status'] != 'closed':
-            ticket_status = 'Open'
-        else:
-            ticket_status = 'Fixed'
-        return ticket_status
-
-    def _populate_comments(self, trac_comments):
-        comments = []
-        for comment in trac_comments:
-            if comment[2] == 'comment' and comment[4] != '':
-                comment_user = comment[1]
-                pagure_issue_comment_user_email = None
-                pagure_issue_comment_body = comment[4]
-                pagure_issue_comment_created_at = datetime.strptime(
-                    comment[0].value, "%Y%m%dT%H:%M:%S")
-                pagure_issue_comment_updated_at = None
-
-                # No idea what to do with this right now
-                # editor: not supported by github api
-                pagure_issue_comment_parent = None
-                pagure_issue_comment_editor = None
-
-                # comment updated at
-                pagure_issue_comment_edited_on = None
-
-                # The User who commented
-                pagure_issue_comment_user = self._find_fas_user(comment[1])
-
-                # Object to represent comment on an issue
-                pagure_issue_comment = models.IssueComment(
-                    id=None,
-                    comment=pagure_issue_comment_body,
-                    parent=pagure_issue_comment_parent,
-                    date_created=pagure_issue_comment_created_at,
-                    user=pagure_issue_comment_user.to_json(),
-                    edited_on=pagure_issue_comment_edited_on,
-                    editor=pagure_issue_comment_editor)
-
-                comments.append(pagure_issue_comment.to_json())
-                return comments
-
-    def _populate_issue(self, ticket_id):
-        trac_ticket = self.trac.ticket.get(ticket_id)[3]
-        pagure_issue_title = trac_ticket['summary']
-        pagure_issue_content = trac_ticket['description']
-
-        if pagure_issue_content == '':
-            pagure_issue_content = '#No Description Provided'
-
-        pagure_issue_status = self._get_ticket_status(trac_ticket)
-
-        pagure_issue_created_at = datetime.strptime(
-            self.trac.ticket.get(ticket_id)[1].value, "%Y%m%dT%H:%M:%S")
-
-        pagure_issue_assignee = trac_ticket['owner']
-
-        pagure_issue_tags = self._get_ticket_tags(trac_ticket)
-
-        pagure_issue_depends = []
-        pagure_issue_blocks = []
-        pagure_issue_is_private = False
-
-        pagure_issue_user = self._find_fas_user(trac_ticket['reporter'])
-
-        pagure_issue = models.Issue(
-            id=None,
-            title=pagure_issue_title,
-            content=pagure_issue_content,
-            status=pagure_issue_status,
-            date_created=pagure_issue_created_at,
-            user=pagure_issue_user.to_json(),
-            private=pagure_issue_is_private,
-            tags=pagure_issue_tags,
-            depends=pagure_issue_depends,
-            blocks=pagure_issue_blocks,
-            assignee=pagure_issue_assignee)
-        return pagure_issue
-
-    def import_issues(self, repo_path, repo_folder,
-                      trac_query='max=0&order=id'):
-        '''Import issues from trac instance using xmlrpc API'''
-        tickets_id = self.tracclient.ticket.query(trac_query)
-
-        for ticket_id in tickets_id:
-
-            pagure_issue = trac.populate_issue(self.tracclient,
-                                               self.fasclient, ticket_id)
-
-            pagure_issue_comments = self.tracclient.ticket.changeLog(ticket_id)
-            comments = trac.populate_comments(self.fasclient,
-                                              pagure_issue_comments)
-
-            # add all the comments to the issue object
-            pagure_issue.comments = comments
-
-            # update the local git repo
-            print 'Update repo with issue :' + str(ticket_id)
-            pagure_importer.lib.git.update_git(pagure_issue,
-                                               repo_path,
-                                               repo_folder)
diff --git a/pagure_importer/lib/trac.py b/pagure_importer/lib/trac.py
deleted file mode 100644
index fb3d062..0000000
--- a/pagure_importer/lib/trac.py
+++ /dev/null
@@ -1,90 +0,0 @@
-from pagure_importer.lib.models import IssueComment, Issue
-from datetime import datetime
-
-
-def get_ticket_tags(trac_ticket):
-    return []
-
-
-def get_ticket_status(trac_ticket):
-    ''' Converts Trac ticket status
-        to Pagure issue status'''
-
-    if trac_ticket['status'] != 'closed':
-        ticket_status = 'Open'
-    else:
-        ticket_status = 'Fixed'
-    return ticket_status
-
-
-def populate_comments(fasclient, trac_comments):
-    comments = []
-    for comment in trac_comments:
-        if comment[2] == 'comment' and comment[4] != '':
-            comment_user = comment[1]
-            pagure_issue_comment_user_email = None
-            pagure_issue_comment_body = comment[4]
-            pagure_issue_comment_created_at = datetime.strptime(
-                comment[0].value, "%Y%m%dT%H:%M:%S")
-            pagure_issue_comment_updated_at = None
-
-            # No idea what to do with this right now
-            # editor: not supported by github api
-            pagure_issue_comment_parent = None
-            pagure_issue_comment_editor = None
-
-            # comment updated at
-            pagure_issue_comment_edited_on = None
-
-            # The User who commented
-            pagure_issue_comment_user = fasclient.find_fas_user(comment[1])
-
-            # Object to represent comment on an issue
-            pagure_issue_comment = IssueComment(
-                id=None,
-                comment=pagure_issue_comment_body,
-                parent=pagure_issue_comment_parent,
-                date_created=pagure_issue_comment_created_at,
-                user=pagure_issue_comment_user.to_json(),
-                edited_on=pagure_issue_comment_edited_on,
-                editor=pagure_issue_comment_editor)
-
-            comments.append(pagure_issue_comment.to_json())
-    return comments
-
-
-def populate_issue(trac, fasclient, ticket_id):
-    trac_ticket = trac.ticket.get(ticket_id)[3]
-    pagure_issue_title = trac_ticket['summary']
-    pagure_issue_content = trac_ticket['description']
-
-    if pagure_issue_content == '':
-        pagure_issue_content = '#No Description Provided'
-
-    pagure_issue_status = get_ticket_status(trac_ticket)
-
-    pagure_issue_created_at = datetime.strptime(
-        trac.ticket.get(ticket_id)[1].value, "%Y%m%dT%H:%M:%S")
-
-    pagure_issue_assignee = fasclient.find_fas_user(trac_ticket['owner'])
-
-    pagure_issue_tags = get_ticket_tags(trac_ticket)
-
-    pagure_issue_depends = []
-    pagure_issue_blocks = []
-    pagure_issue_is_private = False
-
-    pagure_issue_user = fasclient.find_fas_user(trac_ticket['reporter'])
-    pagure_issue = Issue(
-        id=ticket_id,
-        title=pagure_issue_title,
-        content=pagure_issue_content,
-        status=pagure_issue_status,
-        date_created=pagure_issue_created_at,
-        user=pagure_issue_user.to_json(),
-        private=pagure_issue_is_private,
-        tags=pagure_issue_tags,
-        depends=pagure_issue_depends,
-        blocks=pagure_issue_blocks,
-        assignee=pagure_issue_assignee.to_json())
-    return pagure_issue
diff --git a/pagure_importer/run.py b/pagure_importer/run.py
deleted file mode 100644
index d327228..0000000
--- a/pagure_importer/run.py
+++ /dev/null
@@ -1,63 +0,0 @@
-#!/usr/bin/env python
-import getpass
-from forms import form_github_issues
-from settings import IMPORT_SOURCES, IMPORT_OPTIONS, REPO_NAME, REPO_PATH
-import pagure_importer
-import pagure_importer.lib
-import pagure_importer.lib.sources
-from pagure_importer.lib.sources.importer_github import GithubImporter
-from pagure_importer.lib.sources.importer_trac import TracImporter
-from pagure_importer.lib import generate_json_for_github_contributors, \
-    generate_json_for_github_issue_commentors, \
-    assemble_github_contributors_commentors
-
-
-def github_handler(item):
-    if item.lower() == 'issues':
-        github_username, github_password, github_project_name = form_github_issues()
-        gen_json = raw_input('Do you want to generate jsons for project\'s contributers and issue commentors? (y/n): ')
-        if gen_json == 'n':
-            github_importer = GithubImporter(
-                github_username=github_username,
-                github_password=github_password,
-                github_project_name=github_project_name)
-            github_importer.import_issues(repo_path=REPO_NAME, repo_folder=REPO_PATH)
-        else:
-            generate_json_for_github_contributors(
-                github_username,
-                github_password,
-                github_project_name)
-            generate_json_for_github_issue_commentors(
-                github_username,
-                github_password,
-                github_project_name)
-            assemble_github_contributors_commentors()
-    return
-
-
-def trac_handler(item, fedora=False):
-    if item.lower() == 'issues':
-        trac_url = raw_input('Enter the trac project url: ')
-        trac_importer = TracImporter(trac_url)
-        trac_importer.import_issues(repo_path=REPO_NAME, repo_folder=REPO_PATH)
-
-
-def main():
-    source = raw_input('Enter source from where you want to import: ')
-    if source.lower() not in IMPORT_SOURCES:
-        print 'Source location not supported'
-        return
-
-    item = raw_input('Enter the item to be imported: ')
-    if item.lower() not in IMPORT_OPTIONS[source]:
-        print 'Item import not supported'
-        return
-
-    if source.lower() == 'github':
-        github_handler(item)
-    elif source.lower() == 'fedorahosted':
-        trac_handler(item, fedora=True)
-    return
-
-if __name__ == '__main__':
-    main()
diff --git a/pagure_importer/settings.py b/pagure_importer/settings.py
deleted file mode 100644
index 077ea40..0000000
--- a/pagure_importer/settings.py
+++ /dev/null
@@ -1,7 +0,0 @@
-import os
-
-IMPORT_SOURCES = ['github', 'fedorahosted']
-IMPORT_OPTIONS = {'github': ['issues'], 'fedorahosted': ['issues']}
-
-REPO_NAME = os.environ.get('REPO_NAME', None) #this has to be a bare repo
-REPO_PATH = os.environ.get('REPO_PATH', None) #the parent of the git directory
diff --git a/pagure_importer/utils/__init__.py b/pagure_importer/utils/__init__.py
new file mode 100644
index 0000000..05ccdb8
--- /dev/null
+++ b/pagure_importer/utils/__init__.py
@@ -0,0 +1,168 @@
+import git
+import models
+
+import csv
+import os
+import getpass
+import requests
+import json
+from github import Github
+from requests.auth import HTTPBasicAuth
+
+from pagure_importer.utils.exceptions import FileNotFound, EmailNotFound
+
+def generate_json_for_github_contributors(github_username, github_password, \
+                                                github_project_name):
+    ''' Creates a file containing a list of dicts containing the username and
+    emails of the contributors in the given github project
+    '''
+
+    github_obj = Github(github_username, github_password)
+    project = github_obj.get_repo(github_project_name)
+    commits_url = project.commits_url.replace('{/sha}', '')
+
+    page = 0
+    contributors = []
+    while True:
+        page += 1
+        payload = {'page': page }
+        data_ = json.loads(requests.get(commits_url, params=payload,
+                    auth=HTTPBasicAuth(github_username, github_password)).text)
+
+        if not data_:
+            break
+
+        for data in data_:
+            try:
+                contributor = data['commit']['committer']
+                contributor_email = contributor['email']
+                contributor_fullname = contributor['name']
+                contributor_name = data['committer']['login']
+            except TypeError:
+                print 'Maybe one of the contributors is dropped because of lack of details'
+                continue
+
+            json_data = {
+                'name': contributor_name,
+                'fullname': contributor_fullname,
+                'emails': [contributor_email]
+            }
+
+            present = False
+            for i in contributors:
+                if i == json_data:
+                    present = True
+                    break
+
+            if not present:
+                print 'contributor added: ', contributor_name
+                contributors.append(json_data)
+
+    with open('contributors.json', 'w') as f:
+        f.write(json.dumps(contributors))
+
+    return
+
+
+def generate_json_for_github_issue_commentors(github_username, github_password, \
+                                                github_project_name):
+    ''' Will create a json file containing details of all the user
+    who have commented on any issue in the given project
+    '''
+
+    github_obj = Github(github_username, github_password)
+    project = github_obj.get_repo(github_project_name)
+    issue_comment_url = project.issue_comment_url.replace('{/number}', '')
+
+    page = 0
+    issue_commentors = []
+    while True:
+        page += 1
+        payload = {'page': page }
+        data_ = json.loads(requests.get(issue_comment_url, params=payload,
+                    auth=HTTPBasicAuth(github_username, github_password)).text)
+
+        if not data_:
+            break
+
+        for data in data_:
+            try:
+                commentor = data['user']['login']
+            except TypeError:
+                print 'Maybe one of the issue commentors have been dropped because of lack of details'
+                continue
+
+            present = False
+            for i in issue_commentors:
+                if i == commentor:
+                    present = True
+                    break
+
+            if not present:
+                print 'commentor added: ', commentor
+                issue_commentors.append(commentor)
+
+    with open('issue_commentors.json', 'w') as f:
+        f.write(json.dumps(issue_commentors))
+    return
+
+
+def assemble_github_contributors_commentors():
+    ''' It uses the files: issue_commentors.json and contributors.json
+    Assembles and creates a file: assembled_commentors.csv
+    To use: just fill the empty blocks under emails column'''
+
+    with open('issue_commentors.json', 'r') as ic:
+        issue_names = json.load(ic)
+
+    with open('contributors.json', 'r') as c:
+        contributors = json.load(c)
+
+    names = []
+    for i in issue_names:
+        found = False
+        for j in contributors:
+            if j.get('name', None) == i:
+                j['emails'] = j.get('emails')[0]
+                names.append(j)
+                found = True
+
+        if not found:
+            d = {'name': i, 'fullname': None, 'emails': None}
+            names.append(d)
+
+    with open('assembled_commentors.csv', 'w') as ac:
+        field_names = ['name', 'fullname', 'emails']
+        writer = csv.DictWriter(ac, fieldnames=field_names)
+
+        writer.writeheader()
+        for name in names:
+            writer.writerow(name)
+
+
+def github_get_commentor_email(name):
+    ''' Will return the issue commentor email as given in the
+    assembled_commentors.csv file
+    '''
+
+    if not os.path.exists('assembled_commentors.csv'):
+        raise FileNotFound('The assembled_commentors.json file must be present \
+                Rerun the program and choose to generate the json files')
+
+    data = []
+    with open('assembled_commentors.csv') as ac:
+        reader = csv.DictReader(ac)
+        for row in reader:
+            data.append(dict( \
+                (('name', row['name']), \
+                ('fullname', row['fullname']), \
+                ('emails', row['emails']))))
+
+
+    for i in data:
+        if i.get('name', None) == name:
+            if i['emails']:
+                return str(i['emails'])
+            else:
+                raise EmailNotFound('You need to fill out all the emails of the \
+                        issue commentors')
diff --git a/pagure_importer/utils/exceptions.py b/pagure_importer/utils/exceptions.py
new file mode 100644
index 0000000..a5ab5fe
--- /dev/null
+++ b/pagure_importer/utils/exceptions.py
@@ -0,0 +1,22 @@
+class GithubBadCredentials(Exception):
+    ''' Raised when username/password for github is wrong '''
+    def __init__(self, msg):
+        self.msg = msg
+
+
+class GithubRepoNotFound(Exception):
+    ''' Raised when the repo is not found for the user '''
+    def __init__(self, msg):
+        self.msg = msg
+
+
+class FileNotFound(Exception):
+    ''' Raised when a certain file is not found '''
+    def __init__(self, msg):
+        self.msg = msg
+
+
+class EmailNotFound(Exception):
+    ''' Raised when email is not found '''
+    def __init__(self, msg):
+        self.msg = msg
diff --git a/pagure_importer/utils/fas.py b/pagure_importer/utils/fas.py
new file mode 100644
index 0000000..f62b5f5
--- /dev/null
+++ b/pagure_importer/utils/fas.py
@@ -0,0 +1,23 @@
+from fedora.client.fas2 import AccountSystem
+from pagure_importer.utils.models import User
+
+
+class FASclient ():
+    def __init__(self, fas_username, fas_password, fas_url):
+        self.fasclient = AccountSystem(fas_url, username=fas_username,
+                                       password=fas_password)
+
+        anonymous = User(name='', fullname='', emails=[])
+        self.fasuser = {'': anonymous}
+
+    def find_fas_user(self, user):
+
+        if user not in self.fasuser.keys():
+            person = self.fasclient.person_by_username(user)
+            if not person:
+                return self.fasuser['']
+
+            self.fasuser[user] = User(name=user,
+                                      fullname=person['human_name'],
+                                      emails=[person['email']])
+        return self.fasuser[user]
diff --git a/pagure_importer/utils/git.py b/pagure_importer/utils/git.py
new file mode 100644
index 0000000..33eba48
--- /dev/null
+++ b/pagure_importer/utils/git.py
@@ -0,0 +1,98 @@
+''' Code taken from https://pagure.io/pagure/blob/master/f/pagure/lib/git.py
+    by pingou@pingoured.fr
+'''
+
+import shutil
+import os
+import pygit2
+import tempfile
+import json
+
+from repo import *
+
+def update_git(obj, repo_path, repo_folder):
+    """ Update the given issue in its git.
+    This method forks the provided repo, add/edit the issue whose file name
+    is defined by the uid field of the issue and if there are additions/
+    changes commit them and push them back to the original repo.
+    """
+
+    if not repo_folder:
+        return
+
+    # Get the fork
+    repopath = os.path.join(repo_folder, repo_path)
+
+    # Clone the repo into a temp folder
+    newpath = tempfile.mkdtemp(prefix='pagure-')
+    new_repo = pygit2.clone_repository(repopath, newpath)
+
+    file_path = os.path.join(newpath, obj.uid)
+
+    # Get the current index
+    index = new_repo.index
+
+    # Are we adding files
+    added = False
+    if not os.path.exists(file_path):
+        added = True
+
+    # Write down what changed
+    with open(file_path, 'w') as stream:
+        stream.write(json.dumps(
+            obj.to_json(), sort_keys=True, indent=4,
+            separators=(',', ': ')))
+
+    # Retrieve the list of files that changed
+    diff = new_repo.diff()
+    files = []
+    for p in diff:
+        if hasattr(p, 'new_file_path'):
+            files.append(p.new_file_path)
+        elif hasattr(p, 'delta'):
+            files.append(p.delta.new_file.path)
+
+    # Add the changes to the index
+    if added:
+        index.add(obj.uid)
+    for filename in files:
+        index.add(filename)
+
+    # If not change, return
+    if not files and not added:
+        shutil.rmtree(newpath)
+        return
+
+    # See if there is a parent to this commit
+    parent = None
+    try:
+        parent = new_repo.head.get_object().oid
+    except pygit2.GitError:
+        pass
+
+    parents = []
+    if parent:
+        parents.append(parent)
+
+    # Author/commiter will always be this one
+    author = pygit2.Signature(name='pagure', email='pagure')
+
+    # Actually commit
+    new_repo.create_commit(
+        'refs/heads/master',
+        author,
+        author,
+        'Updated %s %s: %s' % (obj.isa, obj.uid, obj.title),
+        new_repo.index.write_tree(),
+        parents)
+    index.write()
+
+    # Push to origin
+    ori_remote = new_repo.remotes[0]
+    master_ref = new_repo.lookup_reference('HEAD').resolve()
+    refname = '%s:%s' % (master_ref.name, master_ref.name)
+
+    PagureRepo.push(ori_remote, refname)
+
+    # Remove the clone
+    shutil.rmtree(newpath)
diff --git a/pagure_importer/utils/importer_github.py b/pagure_importer/utils/importer_github.py
new file mode 100644
index 0000000..cc61370
--- /dev/null
+++ b/pagure_importer/utils/importer_github.py
@@ -0,0 +1,138 @@
+from github import Github
+
+from pagure_importer.utils import models
+from pagure_importer.utils import github_get_commentor_email
+from pagure_importer.utils.git import update_git
+from pagure_importer.utils.exceptions import (
+    GithubBadCredentials,
+    GithubRepoNotFound
+)
+
+
+class GithubImporter():
+    ''' Imports from Github using PyGithub and libpagure '''
+    def __init__(
+            self,
+            github_username,
+            github_password,
+            github_project_name):
+        self.github_username = github_username
+        self.github_password = github_password
+        self.github_project_name = github_project_name
+        self.github = Github(github_username, github_password)
+
+    def import_issues(self, repo_path, repo_folder, status='all'):
+        ''' Imports the issues on github for
+        the given project
+        '''
+        github_user = None
+        try:
+            github_user = self.github.get_user(self.github_username)
+        except:
+            raise GithubBadCredentials(
+                    'Given github credentials are not correct')
+        repo = self.github.get_repo(self.github_project_name)
+        try:
+            repo_name = repo.name
+        except:
+            raise GithubRepoNotFound(
+                    'Repo not found, project name wrong')
+
+        for github_issue in repo.get_issues(state=status):
+
+            # title of the issue
+            pagure_issue_title = github_issue.title
+
+            # body of the issue
+            if github_issue.body:
+                pagure_issue_content = github_issue.body
+            else:
+                pagure_issue_content = '#No Description Provided'
+
+            # Some details of a issue
+            if github_issue.state != 'closed':
+                pagure_issue_status = 'Open'
+            else:
+                pagure_issue_status = 'Fixed'
+
+            pagure_issue_created_at = github_issue.created_at
+
+            # Not sure how to deal with this atm
+            pagure_issue_assignee = None
+
+            if github_issue.labels:
+                pagure_issue_tags = [i.name for i in github_issue.labels]
+            else:
+                pagure_issue_tags = []
+
+
+            # few things not supported by github
+            pagure_issue_depends = []
+            pagure_issue_blocks = []
+            pagure_issue_is_private = False
+
+
+            # User who created the issue
+            pagure_issue_user = models.User(
+                    name=github_issue.user.login,
+                    fullname=github_issue.user.name,
+                    emails=[github_issue.user.email])
+
+
+            pagure_issue = models.Issue(
+                    id=None,
+                    title = pagure_issue_title,
+                    content = pagure_issue_content,
+                    status = pagure_issue_status,
+                    date_created = pagure_issue_created_at,
+                    user = pagure_issue_user.to_json(),
+                    private = pagure_issue_is_private,
+                    tags = pagure_issue_tags,
+                    depends = pagure_issue_depends,
+                    blocks = pagure_issue_blocks,
+                    assignee = pagure_issue_assignee)
+
+
+            # comments on the issue
+            comments = []
+            for comment in github_issue.get_comments():
+
+                comment_user = comment.user
+                pagure_issue_comment_user_email = comment_user.email
+                pagure_issue_comment_body = comment.body
+                pagure_issue_comment_created_at = comment.created_at
+                pagure_issue_comment_updated_at = comment.updated_at
+
+
+                # No idea what to do with this right now
+                # editor: not supported by github api
+                pagure_issue_comment_parent = None
+                pagure_issue_comment_editor = None
+
+                # comment updated at
+                pagure_issue_comment_edited_on = comment.updated_at
+
+                # The User who commented
+                pagure_issue_comment_user = models.User(
+                        name=comment_user.login,
+                        fullname=comment_user.name,
+                        emails=[comment_user.email] if comment_user.email \
+                                else [github_get_commentor_email(comment_user.login)])
+
+                # Object to represent comment on an issue
+                pagure_issue_comment = models.IssueComment(
+                        id=None,
+                        comment=pagure_issue_comment_body,
+                        parent=pagure_issue_comment_parent,
+                        date_created=pagure_issue_comment_created_at,
+                        user=pagure_issue_comment_user.to_json(),
+                        edited_on=pagure_issue_comment_edited_on,
+                        editor=pagure_issue_comment_editor)
+
+                comments.append(pagure_issue_comment.to_json())
+
+            # add all the comments to the issue object
+            pagure_issue.comments = comments
+
+            # update the local git repo
+            update_git(pagure_issue, repo_path, repo_folder)
diff --git a/pagure_importer/utils/importer_trac.py b/pagure_importer/utils/importer_trac.py
new file mode 100644
index 0000000..50f20b0
--- /dev/null
+++ b/pagure_importer/utils/importer_trac.py
@@ -0,0 +1,35 @@
+from xmlrpclib import ServerProxy
+from pagure_importer.utils.git import update_git
+from pagure_importer.utils import trac
+
+
+class TracImporter():
+    '''Pagure importer for trac instance'''
+
+    def __init__(self, trac_project_url, fasclient=None):
+        self.tracclient = ServerProxy(trac_project_url + '/rpc')
+        if fasclient:
+            self.fasclient = fasclient
+
+    def import_issues(self, repo_path, repo_folder,
+                      trac_query='max=0&order=id'):
+        '''Import issues from trac instance using xmlrpc API'''
+        tickets_id = self.tracclient.ticket.query(trac_query)
+
+        for ticket_id in tickets_id:
+
+            pagure_issue = trac.populate_issue(self.tracclient,
+                                               self.fasclient, ticket_id)
+
+            pagure_issue_comments = self.tracclient.ticket.changeLog(ticket_id)
+            comments = trac.populate_comments(self.fasclient,
+                                              pagure_issue_comments)
+
+            # add all the comments to the issue object
+            pagure_issue.comments = comments
+
+            # update the local git repo
+            print 'Update repo with issue :' + str(ticket_id)
+            update_git(pagure_issue,
+                                               repo_path,
+                                               repo_folder)
diff --git a/pagure_importer/utils/models.py b/pagure_importer/utils/models.py
new file mode 100644
index 0000000..3aa3d83
--- /dev/null
+++ b/pagure_importer/utils/models.py
@@ -0,0 +1,105 @@
+# -*- coding: utf-8 -*-
+
+import datetime
+import json
+import uuid
+
+class Issue():
+    ''' Represents an Issue '''
+
+    def __init__(
+            self, id, title, content,
+            status, date_created, user, private, tags,
+            depends, blocks, assignee, comments=None):
+
+        self.id = id
+        self.title = title
+        self.content = content
+        self.status = status
+        self.date_created = date_created
+        self.user = user
+        self.private = private
+        self.tags = tags
+        self.depends = depends
+        self.blocks = blocks
+        self.assignee = assignee
+        self.comments = comments
+        self.uid = uuid.uuid4().hex
+
+    def to_json(self):
+        ''' Returns a dictionary representation of the issue.
+
+        '''
+        output = {
+            'id': self.id,
+            'title': self.title,
+            'content': self.content,
+            'status': self.status,
+            'date_created': self.date_created.strftime('%s'),
+            'user': self.user,
+            'private': self.private,
+            'tags': self.tags,
+            'depends': self.depends,
+            'blocks': self.blocks,
+            'assignee': self.assignee,
+            'comments': self.comments
+        }
+
+        return output
+
+    @property
+    def isa(self):
+        return 'issue'
+
+
+class IssueComment():
+    ''' Represent a comment for an issue '''
+
+    def __init__(
+            self, id, comment, date_created,
+            user, parent=None, edited_on=None, editor=None):
+
+        self.id = id
+        self.comment = comment
+        self.parent = parent
+        self.date_created = date_created
+        self.user = user
+        self.edited_on = edited_on
+        self.editor = editor
+
+    def to_json(self):
+        ''' Returns a dictionary representation of the issue. '''
+
+        output = {
+            'id': self.id,
+            'comment': self.comment,
+            'parent': self.parent,
+            'date_created': self.date_created.strftime('%s'),
+            'user': self.user,
+            'edited_on': self.edited_on.strftime('%s') if self.edited_on else None,
+            'editor': self.editor or None
+        }
+
+        return output
+
+
+class User():
+    ''' Represents a User '''
+
+    def __init__(
+            self, name, emails,
+            fullname=None):
+        self.name = name
+        self.fullname = fullname
+        self.emails = emails
+
+    def to_json(self):
+        ''' Return a representation of the User in a dictionary. '''
+
+        output = {
+            'name': self.name,
+            'fullname': self.fullname,
+            'emails': self.emails
+        }
+
+        return output
diff --git a/pagure_importer/utils/repo.py b/pagure_importer/utils/repo.py
new file mode 100644
index 0000000..f46b31a
--- /dev/null
+++ b/pagure_importer/utils/repo.py
@@ -0,0 +1,70 @@
+# -*- coding: utf-8 -*-
+
+''' Code taken from https://pagure.io/pagure/blob/master/f/pagure/lib/repo.py
+    by pingou@pingoured.fr
+'''
+
+
+import pygit2
+import sys
+
+
+def get_pygit2_version():
+    ''' Return pygit2 version as a tuple of integers.
+    This is needed for correct version comparison.
+    '''
+    return tuple([int(i) for i in pygit2.__version__.split('.')])
+
+
+class PagureRepo(pygit2.Repository):
+    """ An utility class allowing to go around pygit2's inability to be
+    stable.
+
+    """
+
+    @staticmethod
+    def push(remote, refname):
+        """ Push the given reference to the specified remote. """
+        pygit2_version = get_pygit2_version()
+        if pygit2_version >= (0, 22):
+            remote.push([refname])
+        else:
+            remote.push(refname)
+
+    def pull(self, remote_name='origin', branch='master', force=False):
+        ''' pull changes for the specified remote (defaults to origin).
+
+        Code from MichaelBoselowitz at:
+        https://github.com/MichaelBoselowitz/pygit2-examples/blob/
+            68e889e50a592d30ab4105a2e7b9f28fac7324c8/examples.py#L58
+        licensed under the MIT license.
+        '''
+
+        for remote in self.remotes:
+            if remote.name == remote_name:
+                remote.fetch()
+                remote_master_id = self.lookup_reference(
+                    'refs/remotes/origin/%s' % branch).target
+
+                if force:
+                    repo_branch = self.lookup_reference(
+                        'refs/heads/%s' % branch)
+                    repo_branch.set_target(remote_master_id)
+
+                merge_result, _ = self.merge_analysis(remote_master_id)
+                # Up to date, do nothing
+                if merge_result & pygit2.GIT_MERGE_ANALYSIS_UP_TO_DATE:
+                    return
+                # We can just fastforward
+                elif merge_result & pygit2.GIT_MERGE_ANALYSIS_FASTFORWARD:
+                    self.checkout_tree(self.get(remote_master_id))
+                    master_ref = self.lookup_reference(
+                        'refs/heads/%s' % branch)
+                    master_ref.set_target(remote_master_id)
+                    self.head.set_target(remote_master_id)
+                elif merge_result & pygit2.GIT_MERGE_ANALYSIS_NORMAL:
+                    sys.exit('Pulling remote changes leads to a conflict')
+                else:
+                    print 'Unexpected merge result: %s' % (
+                            pygit2.GIT_MERGE_ANALYSIS_NORMAL)
+                    raise AssertionError('Unknown merge analysis result')
diff --git a/pagure_importer/utils/trac.py b/pagure_importer/utils/trac.py
new file mode 100644
index 0000000..d56a123
--- /dev/null
+++ b/pagure_importer/utils/trac.py
@@ -0,0 +1,90 @@
+from pagure_importer.utils.models import IssueComment, Issue
+from datetime import datetime
+
+
+def get_ticket_tags(trac_ticket):
+    return []
+
+
+def get_ticket_status(trac_ticket):
+    ''' Converts Trac ticket status
+        to Pagure issue status'''
+
+    if trac_ticket['status'] != 'closed':
+        ticket_status = 'Open'
+    else:
+        ticket_status = 'Fixed'
+    return ticket_status
+
+
+def populate_comments(fasclient, trac_comments):
+    comments = []
+    for comment in trac_comments:
+        if comment[2] == 'comment' and comment[4] != '':
+            comment_user = comment[1]
+            pagure_issue_comment_user_email = None
+            pagure_issue_comment_body = comment[4]
+            pagure_issue_comment_created_at = datetime.strptime(
+                comment[0].value, "%Y%m%dT%H:%M:%S")
+            pagure_issue_comment_updated_at = None
+
+            # No idea what to do with this right now
+            # editor: not supported by github api
+            pagure_issue_comment_parent = None
+            pagure_issue_comment_editor = None
+
+            # comment updated at
+            pagure_issue_comment_edited_on = None
+
+            # The User who commented
+            pagure_issue_comment_user = fasclient.find_fas_user(comment[1])
+
+            # Object to represent comment on an issue
+            pagure_issue_comment = IssueComment(
+                id=None,
+                comment=pagure_issue_comment_body,
+                parent=pagure_issue_comment_parent,
+                date_created=pagure_issue_comment_created_at,
+                user=pagure_issue_comment_user.to_json(),
+                edited_on=pagure_issue_comment_edited_on,
+                editor=pagure_issue_comment_editor)
+
+            comments.append(pagure_issue_comment.to_json())
+    return comments
+
+
+def populate_issue(trac, fasclient, ticket_id):
+    trac_ticket = trac.ticket.get(ticket_id)[3]
+    pagure_issue_title = trac_ticket['summary']
+    pagure_issue_content = trac_ticket['description']
+
+    if pagure_issue_content == '':
+        pagure_issue_content = '#No Description Provided'
+
+    pagure_issue_status = get_ticket_status(trac_ticket)
+
+    pagure_issue_created_at = datetime.strptime(
+        trac.ticket.get(ticket_id)[1].value, "%Y%m%dT%H:%M:%S")
+
+    pagure_issue_assignee = fasclient.find_fas_user(trac_ticket['owner'])
+
+    pagure_issue_tags = get_ticket_tags(trac_ticket)
+
+    pagure_issue_depends = []
+    pagure_issue_blocks = []
+    pagure_issue_is_private = False
+
+    pagure_issue_user = fasclient.find_fas_user(trac_ticket['reporter'])
+    pagure_issue = Issue(
+        id=ticket_id,
+        title=pagure_issue_title,
+        content=pagure_issue_content,
+        status=pagure_issue_status,
+        date_created=pagure_issue_created_at,
+        user=pagure_issue_user.to_json(),
+        private=pagure_issue_is_private,
+        tags=pagure_issue_tags,
+        depends=pagure_issue_depends,
+        blocks=pagure_issue_blocks,
+        assignee=pagure_issue_assignee.to_json())
+    return pagure_issue
diff --git a/setup.py b/setup.py
index e031405..65fa0d5 100644
--- a/setup.py
+++ b/setup.py
@@ -32,7 +32,7 @@ setup(
     license='GNU General Public License v2.0',
     entry_points={
         'console_scripts': [
-            'pgimport = pagure_importer.run:main'
+            'pgimport = pagure_importer.app:app'
         ],
     },
     include_package_data=True,
